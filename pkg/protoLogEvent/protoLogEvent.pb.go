// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protoLogEvent.proto

package protoLogEvent

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//reference from
//https://github.com/apache/logging-log4j2/blob/release-2.x/log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java
type ProtoLogEvent struct {
	LoggerFqcn           string            `protobuf:"bytes,1,opt,name=loggerFqcn,proto3" json:"loggerFqcn,omitempty"`
	Marker               string            `protobuf:"bytes,2,opt,name=marker,proto3" json:"marker,omitempty"`
	Level                string            `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	LoggerName           string            `protobuf:"bytes,4,opt,name=loggerName,proto3" json:"loggerName,omitempty"`
	Message              string            `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	TimeMillis           int64             `protobuf:"varint,6,opt,name=timeMillis,proto3" json:"timeMillis,omitempty"`
	Thrown               string            `protobuf:"bytes,7,opt,name=thrown,proto3" json:"thrown,omitempty"`
	ThrownProxy          string            `protobuf:"bytes,8,opt,name=thrownProxy,proto3" json:"thrownProxy,omitempty"`
	ContextMap           map[string]string `protobuf:"bytes,9,rep,name=contextMap,proto3" json:"contextMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContextStack         string            `protobuf:"bytes,10,opt,name=contextStack,proto3" json:"contextStack,omitempty"`
	ThreadName           string            `protobuf:"bytes,11,opt,name=threadName,proto3" json:"threadName,omitempty"`
	Source               string            `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`
	IncludeLocation      bool              `protobuf:"varint,13,opt,name=includeLocation,proto3" json:"includeLocation,omitempty"`
	EndOfBatch           bool              `protobuf:"varint,14,opt,name=endOfBatch,proto3" json:"endOfBatch,omitempty"`
	ContainerMeta        *ContainerMeta    `protobuf:"bytes,15,opt,name=containerMeta,proto3" json:"containerMeta,omitempty"`
	NanoTime             int64             `protobuf:"varint,16,opt,name=nanoTime,proto3" json:"nanoTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ProtoLogEvent) Reset()         { *m = ProtoLogEvent{} }
func (m *ProtoLogEvent) String() string { return proto.CompactTextString(m) }
func (*ProtoLogEvent) ProtoMessage()    {}
func (*ProtoLogEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d06a7ef4f156a5af, []int{0}
}
func (m *ProtoLogEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoLogEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtoLogEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtoLogEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoLogEvent.Merge(m, src)
}
func (m *ProtoLogEvent) XXX_Size() int {
	return m.Size()
}
func (m *ProtoLogEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoLogEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoLogEvent proto.InternalMessageInfo

func (m *ProtoLogEvent) GetLoggerFqcn() string {
	if m != nil {
		return m.LoggerFqcn
	}
	return ""
}

func (m *ProtoLogEvent) GetMarker() string {
	if m != nil {
		return m.Marker
	}
	return ""
}

func (m *ProtoLogEvent) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *ProtoLogEvent) GetLoggerName() string {
	if m != nil {
		return m.LoggerName
	}
	return ""
}

func (m *ProtoLogEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ProtoLogEvent) GetTimeMillis() int64 {
	if m != nil {
		return m.TimeMillis
	}
	return 0
}

func (m *ProtoLogEvent) GetThrown() string {
	if m != nil {
		return m.Thrown
	}
	return ""
}

func (m *ProtoLogEvent) GetThrownProxy() string {
	if m != nil {
		return m.ThrownProxy
	}
	return ""
}

func (m *ProtoLogEvent) GetContextMap() map[string]string {
	if m != nil {
		return m.ContextMap
	}
	return nil
}

func (m *ProtoLogEvent) GetContextStack() string {
	if m != nil {
		return m.ContextStack
	}
	return ""
}

func (m *ProtoLogEvent) GetThreadName() string {
	if m != nil {
		return m.ThreadName
	}
	return ""
}

func (m *ProtoLogEvent) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ProtoLogEvent) GetIncludeLocation() bool {
	if m != nil {
		return m.IncludeLocation
	}
	return false
}

func (m *ProtoLogEvent) GetEndOfBatch() bool {
	if m != nil {
		return m.EndOfBatch
	}
	return false
}

func (m *ProtoLogEvent) GetContainerMeta() *ContainerMeta {
	if m != nil {
		return m.ContainerMeta
	}
	return nil
}

func (m *ProtoLogEvent) GetNanoTime() int64 {
	if m != nil {
		return m.NanoTime
	}
	return 0
}

type ContainerMeta struct {
	ContainerId          string   `protobuf:"bytes,1,opt,name=containerId,proto3" json:"containerId,omitempty"`
	AppName              string   `protobuf:"bytes,2,opt,name=appName,proto3" json:"appName,omitempty"`
	ProcName             string   `protobuf:"bytes,3,opt,name=procName,proto3" json:"procName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContainerMeta) Reset()         { *m = ContainerMeta{} }
func (m *ContainerMeta) String() string { return proto.CompactTextString(m) }
func (*ContainerMeta) ProtoMessage()    {}
func (*ContainerMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_d06a7ef4f156a5af, []int{1}
}
func (m *ContainerMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerMeta.Merge(m, src)
}
func (m *ContainerMeta) XXX_Size() int {
	return m.Size()
}
func (m *ContainerMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerMeta proto.InternalMessageInfo

func (m *ContainerMeta) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *ContainerMeta) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *ContainerMeta) GetProcName() string {
	if m != nil {
		return m.ProcName
	}
	return ""
}

func init() {
	proto.RegisterType((*ProtoLogEvent)(nil), "leyan_proto.log.ProtoLogEvent")
	proto.RegisterMapType((map[string]string)(nil), "leyan_proto.log.ProtoLogEvent.ContextMapEntry")
	proto.RegisterType((*ContainerMeta)(nil), "leyan_proto.log.ContainerMeta")
}

func init() { proto.RegisterFile("protoLogEvent.proto", fileDescriptor_d06a7ef4f156a5af) }

var fileDescriptor_d06a7ef4f156a5af = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0x4f, 0x6e, 0x13, 0x31,
	0x14, 0xc6, 0xe5, 0x86, 0xa6, 0xa9, 0xd3, 0x90, 0x62, 0x10, 0xb2, 0xba, 0x18, 0x8d, 0xb2, 0x9a,
	0x4d, 0x27, 0x52, 0xd9, 0x20, 0x04, 0x9b, 0x96, 0x22, 0x21, 0x35, 0x25, 0x1a, 0x58, 0xb1, 0xa9,
	0x8c, 0xf3, 0x70, 0x46, 0xf1, 0xd8, 0x83, 0xe3, 0x84, 0xe6, 0x06, 0x1c, 0x8d, 0x25, 0x47, 0x40,
	0x39, 0x09, 0xb2, 0x3d, 0x4d, 0x3d, 0x61, 0x13, 0xcd, 0xef, 0x7b, 0xf6, 0xfb, 0xf3, 0xf9, 0x05,
	0x3f, 0xaf, 0x8d, 0xb6, 0xfa, 0x46, 0x8b, 0xeb, 0x35, 0x28, 0x9b, 0x7b, 0x22, 0x43, 0x09, 0x1b,
	0xa6, 0xee, 0x3c, 0xe4, 0x52, 0x8b, 0xd1, 0xaf, 0x43, 0x3c, 0x98, 0xc6, 0x07, 0x49, 0x82, 0xb1,
	0xd4, 0x42, 0x80, 0xf9, 0xf0, 0x83, 0x2b, 0x8a, 0x52, 0x94, 0x1d, 0x17, 0x91, 0x42, 0x5e, 0xe2,
	0x6e, 0xc5, 0xcc, 0x02, 0x0c, 0x3d, 0xf0, 0xb1, 0x86, 0xc8, 0x0b, 0x7c, 0x28, 0x61, 0x0d, 0x92,
	0x76, 0xbc, 0x1c, 0xe0, 0x31, 0xdb, 0x2d, 0xab, 0x80, 0x3e, 0x89, 0xb3, 0x39, 0x85, 0x50, 0x7c,
	0x54, 0xc1, 0x72, 0xc9, 0x04, 0xd0, 0x43, 0x1f, 0x7c, 0x40, 0x77, 0xd3, 0x96, 0x15, 0x4c, 0x4a,
	0x29, 0xcb, 0x25, 0xed, 0xa6, 0x28, 0xeb, 0x14, 0x91, 0xe2, 0xfa, 0xb0, 0x73, 0xa3, 0x7f, 0x2a,
	0x7a, 0x14, 0xfa, 0x08, 0x44, 0x52, 0xdc, 0x0f, 0x5f, 0x53, 0xa3, 0xef, 0x37, 0xb4, 0xe7, 0x83,
	0xb1, 0x44, 0x6e, 0x31, 0xe6, 0x5a, 0x59, 0xb8, 0xb7, 0x13, 0x56, 0xd3, 0xe3, 0xb4, 0x93, 0xf5,
	0x2f, 0xf2, 0x7c, 0xcf, 0x99, 0xbc, 0xe5, 0x4a, 0x7e, 0xb5, 0xbb, 0x70, 0xad, 0xac, 0xd9, 0x14,
	0x51, 0x06, 0x32, 0xc2, 0x27, 0x0d, 0x7d, 0xb6, 0x8c, 0x2f, 0x28, 0xf6, 0x25, 0x5b, 0x9a, 0x9f,
	0x66, 0x6e, 0x80, 0xcd, 0xbc, 0x0f, 0xfd, 0xe0, 0xc3, 0xa3, 0xe2, 0xa6, 0x59, 0xea, 0x95, 0xe1,
	0x40, 0x4f, 0xc2, 0x34, 0x81, 0x48, 0x86, 0x87, 0xa5, 0xe2, 0x72, 0x35, 0x83, 0x1b, 0xcd, 0x99,
	0x2d, 0xb5, 0xa2, 0x83, 0x14, 0x65, 0xbd, 0x62, 0x5f, 0x76, 0x15, 0x40, 0xcd, 0x3e, 0x7d, 0xbf,
	0x64, 0x96, 0xcf, 0xe9, 0x53, 0x7f, 0x28, 0x52, 0xc8, 0x7b, 0x3c, 0x70, 0x1d, 0xb1, 0x52, 0x81,
	0x99, 0x80, 0x65, 0x74, 0x98, 0xa2, 0xac, 0x7f, 0x91, 0xfc, 0x37, 0xf8, 0x55, 0x7c, 0xaa, 0x68,
	0x5f, 0x22, 0x67, 0xb8, 0xa7, 0x98, 0xd2, 0x5f, 0xca, 0x0a, 0xe8, 0xa9, 0x7f, 0x93, 0x1d, 0x9f,
	0xbd, 0xc3, 0xc3, 0x3d, 0x9b, 0xc8, 0x29, 0xee, 0x2c, 0x60, 0xd3, 0x6c, 0x91, 0xfb, 0x74, 0x6b,
	0xb2, 0x66, 0x72, 0x05, 0xcd, 0xf6, 0x04, 0x78, 0x73, 0xf0, 0x1a, 0x8d, 0x04, 0x1e, 0xb4, 0x4a,
	0xbb, 0x97, 0xdc, 0x15, 0xff, 0x38, 0x6b, 0x92, 0xc4, 0x92, 0xdb, 0x1e, 0x56, 0xd7, 0xde, 0xd2,
	0x90, 0xee, 0x01, 0x5d, 0x9f, 0xb5, 0xd1, 0xdc, 0x87, 0xc2, 0x42, 0xee, 0xf8, 0xf2, 0xee, 0xf7,
	0x36, 0x41, 0x7f, 0xb6, 0x09, 0xfa, 0xbb, 0x4d, 0x10, 0x7e, 0xc6, 0x75, 0x15, 0x3c, 0xb0, 0xc0,
	0xe7, 0xce, 0x81, 0x29, 0xfa, 0xfa, 0x56, 0x94, 0x36, 0x12, 0xb9, 0xae, 0xc6, 0x9e, 0xc2, 0xef,
	0xb9, 0x37, 0xeb, 0x5c, 0x68, 0xc9, 0x94, 0x18, 0x4b, 0x2d, 0xc6, 0xad, 0xff, 0xda, 0xb7, 0xae,
	0xc7, 0x57, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x65, 0xfd, 0xc2, 0x70, 0x83, 0x03, 0x00, 0x00,
}

func (m *ProtoLogEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoLogEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoLogEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NanoTime != 0 {
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(m.NanoTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ContainerMeta != nil {
		{
			size, err := m.ContainerMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtoLogEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.EndOfBatch {
		i--
		if m.EndOfBatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.IncludeLocation {
		i--
		if m.IncludeLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ThreadName) > 0 {
		i -= len(m.ThreadName)
		copy(dAtA[i:], m.ThreadName)
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(m.ThreadName)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ContextStack) > 0 {
		i -= len(m.ContextStack)
		copy(dAtA[i:], m.ContextStack)
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(m.ContextStack)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ContextMap) > 0 {
		for k := range m.ContextMap {
			v := m.ContextMap[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProtoLogEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ThrownProxy) > 0 {
		i -= len(m.ThrownProxy)
		copy(dAtA[i:], m.ThrownProxy)
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(m.ThrownProxy)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Thrown) > 0 {
		i -= len(m.Thrown)
		copy(dAtA[i:], m.Thrown)
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(m.Thrown)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TimeMillis != 0 {
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(m.TimeMillis))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LoggerName) > 0 {
		i -= len(m.LoggerName)
		copy(dAtA[i:], m.LoggerName)
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(m.LoggerName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Marker) > 0 {
		i -= len(m.Marker)
		copy(dAtA[i:], m.Marker)
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(m.Marker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LoggerFqcn) > 0 {
		i -= len(m.LoggerFqcn)
		copy(dAtA[i:], m.LoggerFqcn)
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(m.LoggerFqcn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProcName) > 0 {
		i -= len(m.ProcName)
		copy(dAtA[i:], m.ProcName)
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(m.ProcName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContainerId) > 0 {
		i -= len(m.ContainerId)
		copy(dAtA[i:], m.ContainerId)
		i = encodeVarintProtoLogEvent(dAtA, i, uint64(len(m.ContainerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtoLogEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtoLogEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProtoLogEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoggerFqcn)
	if l > 0 {
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	l = len(m.Marker)
	if l > 0 {
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	l = len(m.LoggerName)
	if l > 0 {
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	if m.TimeMillis != 0 {
		n += 1 + sovProtoLogEvent(uint64(m.TimeMillis))
	}
	l = len(m.Thrown)
	if l > 0 {
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	l = len(m.ThrownProxy)
	if l > 0 {
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	if len(m.ContextMap) > 0 {
		for k, v := range m.ContextMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovProtoLogEvent(uint64(len(k))) + 1 + len(v) + sovProtoLogEvent(uint64(len(v)))
			n += mapEntrySize + 1 + sovProtoLogEvent(uint64(mapEntrySize))
		}
	}
	l = len(m.ContextStack)
	if l > 0 {
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	l = len(m.ThreadName)
	if l > 0 {
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	if m.IncludeLocation {
		n += 2
	}
	if m.EndOfBatch {
		n += 2
	}
	if m.ContainerMeta != nil {
		l = m.ContainerMeta.Size()
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	if m.NanoTime != 0 {
		n += 2 + sovProtoLogEvent(uint64(m.NanoTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	l = len(m.ProcName)
	if l > 0 {
		n += 1 + l + sovProtoLogEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProtoLogEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtoLogEvent(x uint64) (n int) {
	return sovProtoLogEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProtoLogEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoLogEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoLogEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoLogEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoggerFqcn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoggerFqcn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Marker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoggerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoggerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeMillis", wireType)
			}
			m.TimeMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeMillis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thrown", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thrown = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThrownProxy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThrownProxy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContextMap == nil {
				m.ContextMap = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtoLogEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtoLogEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProtoLogEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProtoLogEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtoLogEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthProtoLogEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthProtoLogEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProtoLogEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProtoLogEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ContextMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextStack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextStack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThreadName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeLocation = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndOfBatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EndOfBatch = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContainerMeta == nil {
				m.ContainerMeta = &ContainerMeta{}
			}
			if err := m.ContainerMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NanoTime", wireType)
			}
			m.NanoTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NanoTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtoLogEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtoLogEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtoLogEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtoLogEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtoLogEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtoLogEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtoLogEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtoLogEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtoLogEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtoLogEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtoLogEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtoLogEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtoLogEvent = fmt.Errorf("proto: unexpected end of group")
)
